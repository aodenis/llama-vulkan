#version 450

#extension GL_GOOGLE_include_directive:enable

#include "common.glsl"

layout (binding = 0) buffer writeonly OutBuffer {
    float values[]; // [Z][BACKLOG * HEAD_COUNT]
} outp;

layout (binding = 1) buffer readonly ConfigBuffer {
    uint token_count;
    uint pad0;
    uint pad1;
    uint pad2;
} config;

layout (binding = 2) buffer readonly MatrixDBuffer {
    f16vec2 values[];  // [BACKLOG][HEAD_COUNT][QUARTERROT][2]
} q_cache;

layout (binding = 3) buffer readonly InFBuffer {
    vec2 values[]; // [Z][HEAD_COUNT][QUARTERROT][2], logits
} current_k; // K vector, logit

#ifdef USE_SPEVAR
layout (local_size_x_id = MAX_WGS_CID, local_size_y = 1, local_size_z = 1) in;
#else
layout (local_size_x = MAX_WGS, local_size_y = 1, local_size_z = 1) in;
#endif

void main()
{
    const uint row_id = gl_GlobalInvocationID.x;
    const uint head_id = row_id % HEAD_COUNT;
    const uint z_id = gl_GlobalInvocationID.z * BATCH_ENABLED;

    const uint clamped_row_id = min(row_id, BACKLOG * HEAD_COUNT - 1);
    const uint q_index = clamped_row_id / HEAD_COUNT;
    float result = 0;

    for (int i = 0; i < 2 * QUARTERROT; i++) {
        vec2 raw_K = current_k.values[z_id * HEAD_COUNT * 2 * QUARTERROT + head_id * 2 * QUARTERROT + i];
        vec2 raw_Q = vec2(q_cache.values[clamped_row_id * 2 * QUARTERROT + i]);

        float d_theta = float(config.token_count + z_id - q_index) * pow(10000.0, -float(i)/float(2 * QUARTERROT));
        float ct = cos(d_theta);
        float st = sin(d_theta);
        mat2 rot_mat;
        rot_mat[0] = vec2(ct, -st);
        rot_mat[1] = vec2(st, ct);

        result += dot(raw_K, rot_mat * raw_Q);
    }

    if (clamped_row_id == row_id) {
        outp.values[z_id * BACKLOG * HEAD_COUNT + row_id] = result;
    }
}
